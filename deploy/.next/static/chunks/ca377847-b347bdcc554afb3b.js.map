{"version":3,"file":"static/chunks/ca377847-b347bdcc554afb3b.js","mappings":"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","sources":["webpack://_N_E/./node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * Chart.js v4.5.0\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as getDatasetClipArea, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _normalizeAngle, am as _readValueToProps, an as _updateBezierControlPoints, ao as _computeSegments, ap as _boundSegments, aq as _steppedInterpolation, ar as _bezierInterpolation, as as _pointInLine, at as _steppedLineTo, au as _bezierCurveTo, av as drawPoint, aw as addRoundedRectPath, ax as toTRBL, ay as toTRBLCorners, az as _boundSegment, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as distanceBetweenPoints, aG as noop, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as Ticks, aN as log10, aO as _longestText, aP as _filterBetween, aQ as _lookup } from './chunks/helpers.dataset.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n    _getAxisCount() {\n        return this._getAxis().length;\n    }\n    getFirstScaleIdForIndexAxis() {\n        const scales = this.chart.scales;\n        const indexScaleId = this.chart.options.indexAxis;\n        return Object.keys(scales).filter((key)=>scales[key].axis === indexScaleId).shift();\n    }\n    _getAxis() {\n        const axis = {};\n        const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n        for (const dataset of this.chart.data.datasets){\n            axis[valueOrDefault(this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId)] = true;\n        }\n        return Object.keys(axis);\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        const axisCount = this._getAxisCount();\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount) : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n            const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n            const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            const result = lookupMethod(data, axis, value);\n            if (spanGaps) {\n                const { vScale  } = controller._cachedMeta;\n                const { _parsed  } = metaset;\n                const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.lo -= Math.max(0, distanceToDefinedLo);\n                const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.hi += Math.max(0, distanceToDefinedHi);\n            }\n            return result;\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.5.0\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        const clip = getDatasetClipArea(this, meta);\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (clip) {\n            clipArea(ctx, clip);\n        }\n        meta.controller.draw();\n        if (clip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipSelf(ctx, element, endAngle) {\n    const { startAngle , x , y , outerRadius , innerRadius , options  } = element;\n    const { borderWidth , borderJoinStyle  } = options;\n    const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n    if (innerRadius > 0) {\n        const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));\n        ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n    } else {\n        const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));\n        if (borderJoinStyle === 'round') {\n            ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);\n        } else if (borderJoinStyle === 'bevel') {\n            const r = 2 * clipWidth * clipWidth;\n            const endX = -r * Math.cos(endAngle + PI / 2) + x;\n            const endY = -r * Math.sin(endAngle + PI / 2) + y;\n            const startX = r * Math.cos(startAngle + PI / 2) + x;\n            const startY = r * Math.sin(startAngle + PI / 2) + y;\n            ctx.lineTo(endX, endY);\n            ctx.lineTo(startX, startY);\n        }\n    }\n    ctx.closePath();\n    ctx.moveTo(0, 0);\n    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.clip('evenodd');\n}\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset , borderRadius  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n        clipSelf(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true,\n        selfJoin: false\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { chart , index , line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    const meta = chart.getDatasetMeta(index);\n    const clip = getDatasetClipArea(chart, meta);\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis,\n            clip\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale , clip  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    let fillColor = below;\n    if (below !== above) {\n        if (property === 'x') {\n            clipVertical(ctx, target, area.top);\n            fill(ctx, {\n                line,\n                target,\n                color: above,\n                scale,\n                property,\n                clip\n            });\n            ctx.restore();\n            ctx.save();\n            clipVertical(ctx, target, area.bottom);\n        } else if (property === 'y') {\n            clipHorizontal(ctx, target, area.left);\n            fill(ctx, {\n                line,\n                target,\n                color: below,\n                scale,\n                property,\n                clip\n            });\n            ctx.restore();\n            ctx.save();\n            clipHorizontal(ctx, target, area.right);\n            fillColor = above;\n        }\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: fillColor,\n        scale,\n        property,\n        clip\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction clipHorizontal(ctx, target, clipX) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(clipX, firstPoint.y);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(clipX, lastPoint.y);\n        }\n    }\n    ctx.lineTo(clipX, target.first().y);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale , clip  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, clip, bounds) {\n    const chartArea = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x' || property === 'y') {\n        let left, top, right, bottom;\n        if (property === 'x') {\n            left = start;\n            top = chartArea.top;\n            right = end;\n            bottom = chartArea.bottom;\n        } else {\n            left = chartArea.left;\n            top = start;\n            right = chartArea.right;\n            bottom = end;\n        }\n        ctx.beginPath();\n        if (clip) {\n            left = Math.max(left, clip.left);\n            right = Math.min(right, clip.right);\n            top = Math.max(top, clip.top);\n            bottom = Math.min(bottom, clip.bottom);\n        }\n        ctx.rect(left, top, right - left, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","_chunks_helpers_dataset_js__WEBPACK_IMPORTED_MODULE_0__","r","call","window","_update","Date","now","remaining","item","running","items","length","i","draw","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","a","_fn","_easing","e","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","Object","keys","d","animation","animatedProps","getOwnPropertyNames","key","option","b","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","$shared","assign","$animations","animations","_createAnimations","awaitAll","anim","all","then","props","charAt","value","size","scaleClip","scale","allowedOverflow","opts","reverse","end","getSortedDatasetIndices","filterVisible","ilen","metasets","_getSortedDatasetMetas","index","applyStack","stack","dsIndex","datasetIndex","otherValue","singleMode","mode","found","g","s","isStacked","meta","stacked","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","stacks","_stacks","iScale","iAxis","axis","vAxis","indexScale","id","valueScale","itemStacks","getOrCreateStack","stackKey","indexValue","subStack","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","defaults","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","dataset","getDataset","chooseId","x","y","xid","xAxisID","v","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","data","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","u","_dataCheck","convertObjectDataToArray","iAxisKey","vAxisKey","adata","isExtensible","l","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","f","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","otherMin","otherMax","getUserBounds","minDefined","maxDefined","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","t","_clip","clip","defaultClip","top","right","bottom","left","disabled","elements","area","chartArea","drawActiveElementsOnTop","element","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","parent","context","j","dataIndex","raw","_resolveElementOptions","elementType","cache","cacheKey","sharing","h","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","parseValue","entry","parseFloatBar","startValue","endValue","barStart","barEnd","abs","_custom","parseArrayOrPrimitive","isFloatBar","custom","parseEdge","edge","orig","startEnd","BarController","categoryPercentage","barPercentage","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","obj","bars","base","getBasePixel","horizontal","isHorizontal","ruler","_getRuler","vpixels","k","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","enableBorderRadius","center","height","width","setBorderSkipped","borderSkipped","setInflateAmount","inflateAmount","ratio","_getStacks","last","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getAxisCount","_getAxis","getFirstScaleIdForIndexAxis","indexScaleId","firstScaleAxisId","_getStackIndex","name","pixels","getPixelForValue","barThickness","computeMinSampleSize","curr","getAllScaleValues","_cache","$bar","visibleMetas","concat","_","sort","_length","updateMinAndPrev","ticks","getPixelForTick","_startPixel","_endPixel","stackCount","baseValue","minBarLength","actualBase","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","axisCount","computeFlexCategoryTraits","next","percent","chunk","computeFitCategoryTraits","thickness","axisID","axisNumber","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","DoughnutController","animateRotate","animateScale","cutout","rotation","circumference","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","legendItem","toggleDataVisibility","innerRadius","outerRadius","offsetX","offsetY","getter","_getRotation","_getCircumference","_getRotationExtents","T","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","m","chartWeight","_getRingWeight","ratioX","ratioY","getRatioAndOffset","endAngle","startAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","p","calcMin","maxX","maxY","H","minX","P","minY","maxWidth","maxHeight","n","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","o","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","q","w","_datasetIndex","_decimated","segment","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","border","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","evaluateInteractionItems","position","handler","intersect","getSortedVisibleDatasetMetas","lo","hi","binarySearch","metaset","lookupMethod","_reversePixels","A","B","el","getRange","result","distanceToDefinedLo","slice","findIndex","distanceToDefinedHi","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","C","inRange","getNearestItems","getNearestCartesianItems","distanceMetric","getDistanceMetricForAxis","useX","useY","pt1","pt2","sqrt","pow","minDistance","getCenterPoint","distance","getProps","D","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","z","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","v1","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","fitBoxes","boxes","params","layout","refit","changed","refitBoxes","getMargins","positions","margin","same","other","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","fullSize","setBoxDims","placeBoxes","userPadding","padding","placed","stackWeight","layouts","addBox","_layers","removeBox","layoutItem","minPadding","E","availableWidth","availableHeight","buildLayoutBoxes","layoutBoxes","wrapBoxes","wrap","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","verticalBoxes","horizontalBoxes","F","beforeLayout","vBoxMaxWidth","hBoxMaxHeight","setLayoutDims","buildStacks","includes","_stack","handleMaxPadding","updatePos","change","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","K","passive","nodeListContains","nodeList","node","contains","createAttachObserver","observer","MutationObserver","trigger","entries","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","createResizeObserver","container","I","L","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","fromNativeEvent","native","DomPlatform","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","J","displayHeight","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","G","isConnected","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","newTicks","majorStart","majorEnd","ceil","round","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","maxTicksLimit","sample","numItems","increment","len","getTickMarkLength","drawTicks","tickLength","getTitleHeight","fallback","font","a0","lines","lineHeight","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_maxLength","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","O","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","Q","margins","grace","tickOpts","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","R","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","autoSkip","source","determinedMaxTicks","determineMaxTicks","_tickSize","ticksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","skipMajors","calculateSpacing","evenMajorSpacing","getEvenSpacing","factors","N","avgMajorSpacing","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","tickWidth","maxLabelDiagonal","numTicks","minRotation","maxRotation","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","S","title","U","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","jlen","tickFont","fontString","nestedLabel","caches","widths","heights","widestLabelSize","highestLabelSize","_resolveTickFontOptions","string","gc","V","gcLen","valueAt","idx","pixel","decimal","W","X","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","borderValue","lineValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","getPixelForGridLine","offsetGridLines","validIndex","textAlign","lineCount","textOffset","crossAlign","tickAndPadding","hTickAndPadding","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","backdrop","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","Y","renderTextOptions","Z","$","drawTitle","titleX","titleY","titleArgs","a2","a1","tz","gz","bz","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","parentScope","proto","getPrototypeOf","registerDefaults","itemDefaults","a4","routeDefaults","routes","propertyParts","property","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","describe","unregister","a3","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","reg","_getRegistryForType","arg","_exec","itemReg","component","camelMethod","a5","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","localIds","local","createDescriptors","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","previousDescriptors","some","getIndexAxis","datasetDefaults","datasetOptions","idMatchesAxis","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","initOptions","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","retrieveAxisFromDatasets","boundDs","defaultId","defaultScaleOptions","ab","defaultID","initData","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","a6","Array","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isScriptable","isIndexable","aa","a7","hasFunction","subResolver","a8","descriptorDefaults","resolverCache","a9","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","M","getElementById","instances","getChart","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","ac","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","ad","resizeDelay","_initialize","maintainAspectRatio","responsive","ae","bindEvents","af","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","ag","unbindEvents","_getUniformDataChanges","moveNumericKeys","intKey","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","ah","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","detached","_remove","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","ai","pluginId","replay","hoverOptions","hover","deactivated","activated","inChartArea","eventFilter","_handleEvent","lastEvent","_getActiveElements","isClick","aj","onHover","rThetaToXY","theta","pathArc","pixelMargin","innerR","spacingOffset","alpha","noSpacingOuterRadius","avNogSpacingRadius","noSpacingInnerRadius","beta","angleOffset","outerStart","outerEnd","innerStart","innerEnd","parseBorderRadius$1","angleDelta","borderRadius","am","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","PI","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","closePath","ArcElement","borderJoinStyle","selfJoin","fullCircles","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","ak","halfAngle","halfRadius","translate","radiusOffset","drawArc","inner","lineJoin","clipArc","angleMargin","clipSelf","outerAngleClip","al","innerAngleClip","clipWidth","rect","setStyle","lineCap","borderCapStyle","previous","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","pathSegment","lineMethod","stepped","at","tension","cubicInterpolationMode","au","fastPathSegment","prevX","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","usePath2D","Path2D","LineElement","capBezierPoints","_path","_points","_segments","_pointsUpdated","an","segments","ao","interpolate","ap","_interpolate","aq","ar","as","interpolated","segmentMethod","path","strokePathDirect","inRange$1","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","av","getBarBounds","bar","half","skipOrLimit","skipX","skipY","bounds","addNormalRectPath","inflateRect","amount","refRect","BarElement","outer","boundingRects","parseBorderWidth","maxW","maxH","ax","parseBorderRadius","ay","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","addRectPath","hasRadius","aw","_getBounds","_findSegmentEnd","_getEdge","replace","interpolatedLineTo","interpolatedPoint","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","fontLineHeight","legendItemText","calculateLegendItemHeight","adjustHitBoxes","rtl","rtlHelper","aA","hitbox","leftForLtr","_draw","cursor","defaultColor","halfFontSize","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","aE","yBoxTop","xBoxLeft","fillText","strikethrough","aB","textDirection","textWidth","setWidth","aC","aD","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","hoveredItem","sameItem","plugin_legend","_element","_args","afterEvent","ci","useBorderRadius","WeakMap","positioners","average","xSet","eventPosition","nearestElement","aF","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineAlignment","yAlign","determineYAlign","xAlign","determineXAlign","chartWidth","doesNotFitWithAlign","caret","caretSize","caretPadding","getBackgroundPoint","alignment","cornerRadius","paddingAndSize","alignX","alignY","getAlignedX","overrideCallbacks","defaultCallbacks","beforeTitle","aG","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","formattedValue","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","createTooltipItem","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleAlign","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","textColor","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","addIfString","addedLabels","unshift","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","findOrAddLabel","lastIndexOf","relativeLabelSize","minSpacing","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","maxTicks","stepSize","computeTickLimit","generateTicks$1","generationOptions","dataRange","niceMin","niceMax","numSpaces","precision","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","aI","aJ","aK","decimalPlaces","aL","tickValue","aH","LinearScale","aM","formatters","numeric","log10Floor","aN","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","LogarithmicScale","logarithmic","_zero","generateTicks","minExp","exp","startExp","significand","lastTick","getTickBackdropHeight","determineLimits","pathRadiusLine","getPointPosition","RadialLinearScale","animate","centerPointLabels","drawingArea","_pointLabels","_pointLabelItems","_padding","fitWithPointLabels","limits","valueCount","pointLabelOpts","additionalAngle","getPointLabelContext","plFont","textSize","aO","updateLimits","hLimits","vLimits","setCenterPoint","buildPointLabelItems","itemOpts","extra","createPointLabelItem","outerDistance","pointLabelPosition","isNotOverlapped","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","drawPointLabels","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawRadiusLine","gridLineOpts","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","addTick","time","timestamps","aQ","ticksFromTimestamps","majorUnit","setMajorTicks","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","aP","_getLabelCapacity","determineUnitForFormatting","determineMajorUnit","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable"],"sourceRoot":""}