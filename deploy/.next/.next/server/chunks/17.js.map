{"version":3,"file":"17.js","mappings":"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","sources":["webpack://jsm_banking/./lib/actions/bank.actions.ts","webpack://jsm_banking/./lib/actions/transaction.actions.ts","webpack://jsm_banking/./lib/feature-flags.ts"],"sourcesContent":["\"use server\";\n\nimport {\n  CountryCode,\n  TransferAuthorizationCreateRequest,\n  TransferCreateRequest,\n} from \"plaid\";\n\nimport { plaidClient } from \"../plaid\";\nimport { parseStringify } from \"../utils\";\nimport { isPlaidEnabled } from \"../feature-flags\";\n\nimport { getTransactionsByBankId, upsertPlaidTransactions } from \"./transaction.actions\";\nimport { getBanks, getBank } from \"./user.actions\";\n\nconst mapStoredTransaction = (transaction: Transaction) => ({\n  id: transaction.id,\n  name: transaction.name,\n  amount: transaction.amount,\n  date: transaction.date,\n  paymentChannel: transaction.paymentChannel,\n  category: transaction.category,\n  type: transaction.type || transaction.direction,\n});\n\nconst buildFallbackAccount = (bank: Bank) => {\n  const shareableId = (bank as any).shareableId || (bank as any).sharaebleId;\n  const maskSource = bank.accountId || shareableId || bank.$id;\n  const mask = maskSource ? maskSource.slice(-4) : \"0000\";\n\n  return {\n    id: bank.accountId || bank.$id,\n    availableBalance: 0,\n    currentBalance: 0,\n    institutionId: bank.bankId || \"manual\",\n    name: `Manual Account ${mask}`,\n    officialName: bank.bankId || \"Manual Account\",\n    mask,\n    type: \"manual\",\n    subtype: \"manual\",\n    appwriteItemId: bank.$id,\n    sharaebleId: shareableId,\n  };\n};\n\n// Get multiple bank accounts\nexport const getAccounts = async ({ userId }: getAccountsProps) => {\n  try {\n    const banks = await getBanks({ userId });\n\n    if (!isPlaidEnabled()) {\n      const accounts = banks?.map(buildFallbackAccount) ?? [];\n\n      return parseStringify({\n        data: accounts,\n        totalBanks: accounts.length,\n        totalCurrentBalance: 0,\n      });\n    }\n\n    const accounts = await Promise.all(\n      banks?.map(async (bank: Bank) => {\n        const accountsResponse = await plaidClient.accountsGet({\n          access_token: bank.accessToken,\n        });\n        const accountData = accountsResponse.data.accounts[0];\n\n        const institution = await getInstitution({\n          institutionId: accountsResponse.data.item.institution_id!,\n        });\n\n        return {\n          id: accountData.account_id,\n          availableBalance: accountData.balances.available!,\n          currentBalance: accountData.balances.current!,\n          institutionId: institution.institution_id,\n          name: accountData.name,\n          officialName: accountData.official_name,\n          mask: accountData.mask!,\n          type: accountData.type as string,\n          subtype: accountData.subtype! as string,\n          appwriteItemId: bank.$id,\n          sharaebleId: (bank as any).shareableId,\n        };\n      }) ?? []\n    );\n\n    const totalBanks = accounts.length;\n    const totalCurrentBalance = accounts.reduce((total, account) => {\n      return total + account.currentBalance;\n    }, 0);\n\n    return parseStringify({ data: accounts, totalBanks, totalCurrentBalance });\n  } catch (error) {\n    console.error(\"An error occurred while getting the accounts:\", error);\n  }\n};\n\n// Get one bank account\nexport const getAccount = async ({ appwriteItemId }: getAccountProps) => {\n  try {\n    const bank = await getBank({ documentId: appwriteItemId });\n\n    const storedTransactionsData = await getTransactionsByBankId({\n      bankId: bank.$id,\n    });\n\n    const storedTransactions = storedTransactionsData.documents\n      .map(mapStoredTransaction)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n    if (!isPlaidEnabled()) {\n      const account = buildFallbackAccount(bank);\n      return parseStringify({\n        data: account,\n        transactions: storedTransactions,\n      });\n    }\n\n    const accountsResponse = await plaidClient.accountsGet({\n      access_token: bank.accessToken,\n    });\n    const accountData = accountsResponse.data.accounts[0];\n\n    const userId = typeof bank.userId === \"string\" ? bank.userId : bank.userId?.$id;\n\n    const plaidTransactions = await getTransactions({\n      accessToken: bank?.accessToken,\n    });\n\n    if (userId) {\n      await upsertPlaidTransactions(\n        bank.$id,\n        userId,\n        plaidTransactions.map((transaction: any) => ({\n          name: transaction.name,\n          amount: transaction.amount,\n          date: transaction.date,\n          category: transaction.category,\n          paymentChannel: transaction.paymentChannel,\n          externalId: transaction.id,\n          status: transaction.pending ? \"pending\" : \"posted\",\n          accountId: transaction.accountId,\n        }))\n      );\n    }\n\n    const institution = await getInstitution({\n      institutionId: accountsResponse.data.item.institution_id!,\n    });\n\n    const account = {\n      id: accountData.account_id,\n      availableBalance: accountData.balances.available!,\n      currentBalance: accountData.balances.current!,\n      institutionId: institution.institution_id,\n      name: accountData.name,\n      officialName: accountData.official_name,\n      mask: accountData.mask!,\n      type: accountData.type as string,\n      subtype: accountData.subtype! as string,\n      appwriteItemId: bank.$id,\n    };\n\n    return parseStringify({\n      data: account,\n      transactions: storedTransactions,\n    });\n  } catch (error) {\n    console.error(\"An error occurred while getting the account:\", error);\n  }\n};\n\n// Get bank info\nexport const getInstitution = async ({\n  institutionId,\n}: getInstitutionProps) => {\n  try {\n    const institutionResponse = await plaidClient.institutionsGetById({\n      institution_id: institutionId,\n      country_codes: [\"US\"] as CountryCode[],\n    });\n\n    const intitution = institutionResponse.data.institution;\n\n    return parseStringify(intitution);\n  } catch (error) {\n    console.error(\"An error occurred while getting the accounts:\", error);\n  }\n};\n\n// Get transactions\nexport const getTransactions = async ({\n  accessToken,\n}: getTransactionsProps) => {\n  if (!isPlaidEnabled()) {\n    return [];\n  }\n\n  let hasMore = true;\n  let cursor: string | undefined;\n  const transactions: any[] = [];\n\n  try {\n    while (hasMore) {\n      const response = await plaidClient.transactionsSync({\n        access_token: accessToken,\n        cursor,\n      });\n\n      transactions.push(...response.data.added);\n      cursor = response.data.next_cursor || undefined;\n      hasMore = response.data.has_more;\n    }\n\n    return parseStringify(\n      transactions.map((transaction) => {\n        const direction = transaction.amount >= 0 ? \"debit\" : \"credit\";\n        const signedAmount =\n          direction === \"debit\"\n            ? -Math.abs(transaction.amount)\n            : Math.abs(transaction.amount);\n\n        return {\n          id: transaction.transaction_id,\n          name: transaction.name,\n          paymentChannel: transaction.payment_channel,\n          type: direction,\n          accountId: transaction.account_id,\n          amount: signedAmount,\n          pending: transaction.pending,\n          category: transaction.category ? transaction.category[0] : \"Uncategorized\",\n          date: transaction.date,\n          image: transaction.logo_url,\n        };\n      })\n    );\n  } catch (error) {\n    console.error(\"An error occurred while getting the accounts:\", error);\n  }\n};\n\n// dwolla functions remain unchanged below...\n\n// Create Dwolla transfer authorization\nexport const createDwollaTransferAuthorization = async (\n  transferAuthorization: TransferAuthorizationCreateRequest\n) => {\n  try {\n    const response = await plaidClient.transferAuthorizationCreate(\n      transferAuthorization\n    );\n\n    return parseStringify(response.data);\n  } catch (error) {\n    console.error(\"An error occurred during transfer authorization:\", error);\n  }\n};\n\n// Create Dwolla transfer\nexport const createDwollaTransfer = async (transfer: TransferCreateRequest) => {\n  try {\n    const response = await plaidClient.transferCreate(transfer);\n\n    return parseStringify(response.data);\n  } catch (error) {\n    console.error(\"An error occurred while creating the transfer:\", error);\n  }\n};\n","\"use server\";\n\nimport { ID, Query } from \"node-appwrite\";\nimport { revalidatePath } from \"next/cache\";\n\nimport { createAdminClient, createSessionClient } from \"../appwrite\";\nimport { parseStringify } from \"../utils\";\nimport { getBank, getLoggedInUser } from \"./user.actions\";\n\nconst {\n  APPWRITE_DATABASE_ID: DATABASE_ID,\n  APPWRITE_TRANSACTION_COLLECTION_ID: TRANSACTION_COLLECTION_ID,\n} = process.env;\n\nconst HYDRATE_PATHS = [\"/\", \"/transaction-history\", \"/statements\"] as const;\n\nconst clean = <T extends Record<string, unknown>>(data: T) => {\n  const entries = Object.entries(data).filter(([, value]) =>\n    value !== undefined && value !== null && value !== \"\"\n  );\n  return Object.fromEntries(entries) as T;\n};\n\nconst coerceAmount = (\n  amount: string | number,\n  direction?: \"credit\" | \"debit\"\n) => {\n  const numeric = typeof amount === \"number\" ? amount : Number(amount);\n  if (Number.isNaN(numeric)) {\n    throw new Error(\"Invalid amount supplied for transaction\");\n  }\n\n  if (direction === \"debit\") return numeric > 0 ? -numeric : numeric;\n  if (direction === \"credit\") return Math.abs(numeric);\n  return numeric;\n};\n\nconst deriveDirection = (\n  amount: number,\n  direction?: \"credit\" | \"debit\"\n): \"credit\" | \"debit\" => {\n  if (direction) return direction;\n  return amount < 0 ? \"debit\" : \"credit\";\n};\n\nconst getDatabaseForRead = async () => {\n  try {\n    const { database } = await createSessionClient();\n    return database;\n  } catch (error) {\n    const { database } = await createAdminClient();\n    return database;\n  }\n};\n\nconst mapTransactionDocument = (document: any): Transaction => {\n  const amountValue = typeof document.amount === \"number\"\n    ? document.amount\n    : Number(document.amount);\n\n  const direction = document.direction || document.type || deriveDirection(amountValue);\n\n  return {\n    id: document.externalId || document.$id,\n    $id: document.$id,\n    bankId: document.bankId || document.senderBankId || document.receiverBankId,\n    name: document.name,\n    paymentChannel: document.paymentChannel || document.channel || \"online\",\n    direction,\n    type: direction,\n    accountId: document.accountId,\n    amount: Number.isNaN(amountValue) ? 0 : amountValue,\n    pending: document.status ? document.status !== \"posted\" : document.pending,\n    category: document.category || \"Transfer\",\n    date: document.date || document.$createdAt,\n    image: document.image,\n    status: document.status || (document.pending ? \"pending\" : \"posted\"),\n    source: document.source,\n    externalId: document.externalId,\n    notes: document.notes,\n    $createdAt: document.$createdAt,\n    channel: document.channel,\n    senderBankId: document.senderBankId,\n    receiverBankId: document.receiverBankId,\n  };\n};\n\nconst upsertTransactionDocument = async (\n  payload: Record<string, unknown>\n) => {\n  const { database } = await createAdminClient();\n\n  const externalId = payload.externalId as string | undefined;\n\n  if (externalId) {\n    const existing = await database.listDocuments(\n      DATABASE_ID!,\n      TRANSACTION_COLLECTION_ID!,\n      [Query.equal(\"externalId\", [externalId])]\n    );\n\n    if (existing.total > 0) {\n      const document = existing.documents[0];\n      const updated = await database.updateDocument(\n        DATABASE_ID!,\n        TRANSACTION_COLLECTION_ID!,\n        document.$id,\n        clean(payload)\n      );\n      return parseStringify(updated);\n    }\n  }\n\n  const created = await database.createDocument(\n    DATABASE_ID!,\n    TRANSACTION_COLLECTION_ID!,\n    ID.unique(),\n    clean(payload)\n  );\n\n  return parseStringify(created);\n};\n\nexport const createTransaction = async (\n  transaction: CreateTransactionProps\n) => {\n  try {\n    const amountValue = coerceAmount(transaction.amount, transaction.direction);\n    const direction = deriveDirection(amountValue, transaction.direction);\n\n    const bankId =\n      transaction.bankId || transaction.senderBankId || transaction.receiverBankId;\n\n    const payload = clean({\n      name: transaction.name,\n      amount: amountValue,\n      direction,\n      type: direction,\n      category:\n        transaction.category || (direction === \"debit\" ? \"Transfer\" : \"Transfer\"),\n      paymentChannel: transaction.paymentChannel || transaction.channel || \"online\",\n      channel: transaction.channel || transaction.paymentChannel || \"online\",\n      status: transaction.status || \"posted\",\n      source: transaction.source || \"transfer\",\n      date: transaction.date || new Date().toISOString(),\n      bankId,\n      accountId: transaction.accountId,\n      senderId: transaction.senderId,\n      receiverId: transaction.receiverId,\n      senderBankId: transaction.senderBankId || bankId,\n      receiverBankId: transaction.receiverBankId || bankId,\n      email: transaction.email,\n      userId: transaction.userId,\n      externalId: transaction.externalId,\n      notes: transaction.notes,\n      metadata: transaction.metadata,\n    });\n\n    const created = await upsertTransactionDocument(payload);\n    return created;\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n\nexport const getTransactionsByBankId = async (\n  { bankId }: getTransactionsByBankIdProps\n) => {\n  try {\n    const database = await getDatabaseForRead();\n\n    const primary = await database.listDocuments(\n      DATABASE_ID!,\n      TRANSACTION_COLLECTION_ID!,\n      [Query.equal(\"bankId\", [bankId])]\n    );\n\n    let documents = primary.documents;\n\n    if (!primary.total) {\n      const sender = await database.listDocuments(\n        DATABASE_ID!,\n        TRANSACTION_COLLECTION_ID!,\n        [Query.equal(\"senderBankId\", [bankId])]\n      );\n\n      const receiver = await database.listDocuments(\n        DATABASE_ID!,\n        TRANSACTION_COLLECTION_ID!,\n        [Query.equal(\"receiverBankId\", [bankId])]\n      );\n\n      const mergedMap = new Map<string, any>();\n\n      sender.documents.forEach((doc: any) => {\n        mergedMap.set(doc.$id, doc);\n      });\n\n      receiver.documents.forEach((doc: any) => {\n        mergedMap.set(doc.$id, doc);\n      });\n\n      documents = Array.from(mergedMap.values());\n    }\n\n    const mapped = documents\n      .map(mapTransactionDocument)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n    return parseStringify({\n      total: mapped.length,\n      documents: mapped,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const createManualTransaction = async (\n  input: CreateManualTransactionInput\n) => {\n  try {\n    const user = await getLoggedInUser();\n    if (!user) {\n      throw new Error(\"You must be signed in to create a transaction\");\n    }\n\n    const bank = await getBank({ documentId: input.bankId });\n    if (!bank) {\n      throw new Error(\"Bank account not found\");\n    }\n\n    if (bank.userId !== user.$id && bank.userId?.$id !== user.$id) {\n      throw new Error(\"You are not allowed to modify this bank account\");\n    }\n\n    const amountValue = coerceAmount(input.amount, input.direction);\n    const direction = deriveDirection(amountValue, input.direction);\n\n    const payload: CreateTransactionProps = {\n      name: input.name,\n      amount: String(amountValue),\n      bankId: bank.$id,\n      userId: user.$id,\n      senderId: user.$id,\n      receiverId: user.$id,\n      senderBankId: bank.$id,\n      receiverBankId: bank.$id,\n      source: \"manual\",\n      direction,\n      category: input.category || (direction === \"debit\" ? \"Manual\" : \"Manual\"),\n      date: input.date,\n      paymentChannel: \"manual\",\n      status: \"posted\",\n      notes: input.notes,\n    };\n\n    const created = await createTransaction(payload);\n\n    HYDRATE_PATHS.forEach((path) => revalidatePath(path));\n\n    return created;\n  } catch (error) {\n    console.error(\"Error creating manual transaction\", error);\n    throw error;\n  }\n};\n\nexport const upsertPlaidTransactions = async (\n  bankId: string,\n  userId: string,\n  transactions: Array<{\n    name: string;\n    amount: number;\n    date: string;\n    category?: string;\n    paymentChannel?: string;\n    externalId: string;\n    status?: string;\n    accountId?: string;\n  }>\n) => {\n  for (const transaction of transactions) {\n    const payload: CreateTransactionProps = {\n      name: transaction.name,\n      amount: String(transaction.amount),\n      bankId,\n      userId,\n      source: \"plaid\",\n      direction: transaction.amount < 0 ? \"debit\" : \"credit\",\n      category: transaction.category,\n      date: transaction.date,\n      paymentChannel: transaction.paymentChannel || \"online\",\n      status: transaction.status || \"posted\",\n      externalId: transaction.externalId,\n      accountId: transaction.accountId,\n    };\n\n    await createTransaction(payload);\n  }\n};\n","const parseFlag = (value: string | undefined, defaultValue: boolean) => {\n  if (value === undefined || value === null) return defaultValue;\n\n  switch (value.toLowerCase()) {\n    case '1':\n    case 'true':\n    case 'yes':\n    case 'on':\n      return true;\n    case '0':\n    case 'false':\n    case 'no':\n    case 'off':\n      return false;\n    default:\n      return defaultValue;\n  }\n};\n\nexport const isPlaidEnabled = () =>\n  parseFlag(process.env.NEXT_PUBLIC_ENABLE_PLAID ?? process.env.ENABLE_PLAID, true);\n\nexport const isTransfersEnabled = () =>\n  parseFlag(process.env.NEXT_PUBLIC_ENABLE_TRANSFERS ?? process.env.ENABLE_TRANSFERS, true);\n\nexport const getFeatureFlags = () => ({\n  plaid: isPlaidEnabled(),\n  transfers: isTransfersEnabled(),\n});\n"],"names":["mapStoredTransaction","id","transaction","name","amount","date","paymentChannel","category","type","direction","buildFallbackAccount","shareableId","bank","sharaebleId","maskSource","accountId","$id","mask","slice","availableBalance","currentBalance","institutionId","bankId","officialName","subtype","appwriteItemId","getAccounts","userId","banks","getBanks","isPlaidEnabled","accounts","map","parseStringify","data","totalBanks","length","totalCurrentBalance","Promise","all","accountsResponse","plaidClient","accountsGet","access_token","accessToken","accountData","institution","getInstitution","item","institution_id","account_id","balances","available","current","official_name","reduce","total","account","error","console","getAccount","getBank","documentId","storedTransactions","storedTransactionsData","getTransactionsByBankId","documents","sort","a","b","Date","getTime","transactions","plaidTransactions","getTransactions","upsertPlaidTransactions","externalId","status","pending","intitution","institutionResponse","institutionsGetById","country_codes","cursor","hasMore","response","transactionsSync","push","added","next_cursor","undefined","has_more","signedAmount","Math","abs","transaction_id","payment_channel","image","logo_url","createDwollaTransferAuthorization","transferAuthorization","transferAuthorizationCreate","createDwollaTransfer","transfer","transferCreate","APPWRITE_DATABASE_ID","DATABASE_ID","APPWRITE_TRANSACTION_COLLECTION_ID","TRANSACTION_COLLECTION_ID","process","env","HYDRATE_PATHS","clean","Object","fromEntries","entries","filter","value","coerceAmount","numeric","Number","isNaN","deriveDirection","getDatabaseForRead","database","createSessionClient","createAdminClient","mapTransactionDocument","amountValue","document","senderBankId","receiverBankId","channel","$createdAt","source","notes","upsertTransactionDocument","payload","existing","listDocuments","Query","equal","updated","updateDocument","created","createDocument","ID","unique","createTransaction","toISOString","senderId","receiverId","email","metadata","log","primary","sender","receiver","mergedMap","Map","forEach","set","doc","Array","from","values","mapped","createManualTransaction","input","user","getLoggedInUser","String","revalidatePath","path","parseFlag","defaultValue","toLowerCase","isTransfersEnabled"],"sourceRoot":""}